{
* attredefs.h: This file contains the various definitions for constants
* found on the metadata tables
*
* Author:
*   Miguel de Icaza (miguel@ximian.com)
*   Paolo Molaro (lupus@ximian.com)
*
* (C) 2001 Ximian, Inc.
* (C) 2006 Novell, Inc.
*
* From the ECMA documentation
}

{$mode objfpc}
unit mono_attrdefs;
interface

  {
  * 23.1.1  Values for AssemblyHashAlgorithm
  }
type
  MONO_ASSEMBLY_HASH_ATTR =  Longint;
const
  MONO_ASSEMBLY_HASH_NONE = 0;
  MONO_ASSEMBLY_HASH_MD5 = $8003;
  MONO_ASSEMBLY_HASH_SHA1 = $8004;

  {
  * 23.1.2 AssemblyRefs
  }

type
  MONO_ASSEMBLYREF =  Longint;
const
  MONO_ASSEMBLYREF_FULL_PUBLIC_KEY = $0001;
  MONO_ASSEMBLYREF_RETARGETABLE = $0100;
  MONO_ASSEMBLYREF_JIT_TRACKING = $8000;
  MONO_ASSEMBLYREF_NO_JIT_OPT = $4000;

  {
  * 23.1.4 Flags for Event.EventAttributes
  }

type
  MONO_EVENT_ATTR =  Longint;
const
  MONO_EVENT_SPECIALNAME = $0200;
  MONO_EVENT_RTSPECIALNAME = $0400;

  {
  * Field Attributes (23.1.5).
  }
  { For runtime use only  }

type
  MONO_FIELD_ATTR =  Longint;
const
  MONO_FIELD_ATTR_FIELD_ACCESS_MASK = $0007;
  MONO_FIELD_ATTR_COMPILER_CONTROLLED = $0000;
  MONO_FIELD_ATTR_PRIVATE = $0001;
  MONO_FIELD_ATTR_FAM_AND_ASSEM = $0002;
  MONO_FIELD_ATTR_ASSEMBLY = $0003;
  MONO_FIELD_ATTR_FAMILY = $0004;
  MONO_FIELD_ATTR_FAM_OR_ASSEM = $0005;
  MONO_FIELD_ATTR_PUBLIC = $0006;
  MONO_FIELD_ATTR_STATIC = $0010;
  MONO_FIELD_ATTR_INIT_ONLY = $0020;
  MONO_FIELD_ATTR_LITERAL = $0040;
  MONO_FIELD_ATTR_NOT_SERIALIZED = $0080;
  MONO_FIELD_ATTR_SPECIAL_NAME = $0200;
  MONO_FIELD_ATTR_PINVOKE_IMPL = $2000;
  MONO_FIELD_ATTR_RESERVED_MASK = $9500;
  MONO_FIELD_ATTR_RT_SPECIAL_NAME = $0400;
  MONO_FIELD_ATTR_HAS_MARSHAL = $1000;
  MONO_FIELD_ATTR_HAS_DEFAULT = $8000;
  MONO_FIELD_ATTR_HAS_RVA = $0100;

  {
  * 23.1.6 Flags for FileAttributes
  }

type
  MONO_FILE_ATTR =  Longint;
const
  MONO_FILE_HAS_METADATA = 0;
  MONO_FILE_HAS_NO_METADATA = 1;

  {
  * 23.1.7 Flags for generic parameters
  }

type
  MONO_GEN_PARAM_ATTR =  Longint;
const
  MONO_GEN_PARAM_VARIANCE_MASK = $0003;
  MONO_GEN_PARAM_NON_VARIANT = $0000;
  MONO_GEN_PARAM_VARIANT = $0001;
  MONO_GEN_PARAM_COVARIANT = $0002;
  MONO_GEN_PARAM_CONSTRAINT_MASK = $001c;
  MONO_GEN_PARAM_CONSTRAINT_CLASS = $0004;
  MONO_GEN_PARAM_CONSTRAINT_VTYPE = $0008;
  MONO_GEN_PARAM_CONSTRAINT_DCTOR = $0010;

  {
  * 23.1.8 Flags for ImplMap [PInvokeAttributes]
  }

type
  MONO_PINVOKE_ATTR =  Longint;
const
  MONO_PINVOKE_NO_MANGLE = $0001;
  MONO_PINVOKE_CHAR_SET_MASK = $0006;
  MONO_PINVOKE_CHAR_SET_NOT_SPEC = $0000;
  MONO_PINVOKE_CHAR_SET_ANSI = $0002;
  MONO_PINVOKE_CHAR_SET_UNICODE = $0004;
  MONO_PINVOKE_CHAR_SET_AUTO = $0006;
  MONO_PINVOKE_BEST_FIT_ENABLED = $0010;
  MONO_PINVOKE_BEST_FIT_DISABLED = $0020;
  MONO_PINVOKE_BEST_FIT_MASK = $0030;
  MONO_PINVOKE_SUPPORTS_LAST_ERROR = $0040;
  MONO_PINVOKE_CALL_CONV_MASK = $0700;
  MONO_PINVOKE_CALL_CONV_WINAPI = $0100;
  MONO_PINVOKE_CALL_CONV_CDECL = $0200;
  MONO_PINVOKE_CALL_CONV_STDCALL = $0300;
  MONO_PINVOKE_CALL_CONV_THISCALL = $0400;
  MONO_PINVOKE_CALL_CONV_FASTCALL = $0500;
  MONO_PINVOKE_THROW_ON_UNMAPPABLE_ENABLED = $1000;
  MONO_PINVOKE_THROW_ON_UNMAPPABLE_DISABLED = $2000;
  MONO_PINVOKE_THROW_ON_UNMAPPABLE_MASK = $3000;
  MONO_PINVOKE_CALL_CONV_GENERIC = $0010;
  MONO_PINVOKE_CALL_CONV_GENERICINST = $000a;

  {
  * 23.1.9 Flags for ManifestResource
  }

type
  MONO_MANIFEST_RESOURCE_ATTR =  Longint;
const
  MONO_MANIFEST_RESOURCE_VISIBILITY_MASK = $00000007;
  MONO_MANIFEST_RESOURCE_PUBLIC = $00000001;
  MONO_MANIFEST_RESOURCE_PRIVATE = $00000002;

  {
  * Method Attributes (23.1.10)
  }
  {
  * For runtime use only
  }

type
  MONO_METHOD_ATTR =  Longint;
const
  MONO_METHOD_ATTR_ACCESS_MASK = $0007;
  MONO_METHOD_ATTR_COMPILER_CONTROLLED = $0000;
  MONO_METHOD_ATTR_PRIVATE = $0001;
  MONO_METHOD_ATTR_FAM_AND_ASSEM = $0002;
  MONO_METHOD_ATTR_ASSEM = $0003;
  MONO_METHOD_ATTR_FAMILY = $0004;
  MONO_METHOD_ATTR_FAM_OR_ASSEM = $0005;
  MONO_METHOD_ATTR_PUBLIC = $0006;
  MONO_METHOD_ATTR_STATIC = $0010;
  MONO_METHOD_ATTR_FINAL = $0020;
  MONO_METHOD_ATTR_VIRTUAL = $0040;
  MONO_METHOD_ATTR_HIDE_BY_SIG = $0080;
  MONO_METHOD_ATTR_VTABLE_LAYOUT_MASK = $0100;
  MONO_METHOD_ATTR_REUSE_SLOT = $0000;
  MONO_METHOD_ATTR_NEW_SLOT = $0100;
  MONO_METHOD_ATTR_STRICT = $0200;
  MONO_METHOD_ATTR_ABSTRACT = $0400;
  MONO_METHOD_ATTR_SPECIAL_NAME = $0800;
  MONO_METHOD_ATTR_PINVOKE_IMPL = $2000;
  MONO_METHOD_ATTR_UNMANAGED_EXPORT = $0008;
  MONO_METHOD_ATTR_RESERVED_MASK = $d000;
  MONO_METHOD_ATTR_RT_SPECIAL_NAME = $1000;
  MONO_METHOD_ATTR_HAS_SECURITY = $4000;
  MONO_METHOD_ATTR_REQUIRE_SEC_OBJECT = $8000;

  {
  * Method Impl Attributes (23.1.11)
  }

type
  MONO_METHOD_IMPL_ATTR =  Longint;
const
  MONO_METHOD_IMPL_ATTR_CODE_TYPE_MASK = $0003;
  MONO_METHOD_IMPL_ATTR_IL = $0000;
  MONO_METHOD_IMPL_ATTR_NATIVE = $0001;
  MONO_METHOD_IMPL_ATTR_OPTIL = $0002;
  MONO_METHOD_IMPL_ATTR_RUNTIME = $0003;
  MONO_METHOD_IMPL_ATTR_MANAGED_MASK = $0004;
  MONO_METHOD_IMPL_ATTR_UNMANAGED = $0004;
  MONO_METHOD_IMPL_ATTR_MANAGED = $0000;
  MONO_METHOD_IMPL_ATTR_FORWARD_REF = $0010;
  MONO_METHOD_IMPL_ATTR_PRESERVE_SIG = $0080;
  MONO_METHOD_IMPL_ATTR_INTERNAL_CALL = $1000;
  MONO_METHOD_IMPL_ATTR_SYNCHRONIZED = $0020;
  MONO_METHOD_IMPL_ATTR_NOINLINING = $0008;
  MONO_METHOD_IMPL_ATTR_NOOPTIMIZATION = $0040;
  MONO_METHOD_IMPL_ATTR_MAX_METHOD_IMPL_VAL = $ffff;

  {
  * Method Semantics ([MethodSemanticAttributes]) 23.1.12,
  }

type
  MONO_METHOD_SEMANTIC_ATTR =  Longint;
const
  MONO_METHOD_SEMANTIC_SETTER = $0001;
  MONO_METHOD_SEMANTIC_GETTER = $0002;
  MONO_METHOD_SEMANTIC_OTHER = $0004;
  MONO_METHOD_SEMANTIC_ADD_ON = $0008;
  MONO_METHOD_SEMANTIC_REMOVE_ON = $0010;
  MONO_METHOD_SEMANTIC_FIRE = $0020;

  {
  * Flags for Params (23.1.13)
  }

type
  MONO_PARAM_ATTR =  Longint;
const
  MONO_PARAM_ATTR_IN = $0001;
  MONO_PARAM_ATTR_OUT = $0002;
  MONO_PARAM_ATTR_OPTIONAL = $0010;
  MONO_PARAM_ATTR_RESERVED_MASK = $f000;
  MONO_PARAM_ATTR_HAS_DEFAULT = $1000;
  MONO_PARAM_ATTR_HAS_MARSHAL = $2000;
  MONO_PARAM_ATTR_UNUSED = $cfe0;

  {
  * 23.1.14 PropertyAttributes
  }

type
  MONO_PROPERTY_ATTR =  Longint;
const
  MONO_PROPERTY_ATTR_SPECIAL_NAME = $0200;
  MONO_PROPERTY_ATTR_RESERVED_MASK = $f400;
  MONO_PROPERTY_ATTR_RT_SPECIAL_NAME = $0400;
  MONO_PROPERTY_ATTR_HAS_DEFAULT = $1000;
  MONO_PROPERTY_ATTR_UNUSED = $e9ff;

  {
  * Type Attributes (23.1.15).
  }

type
  MONO_TYPE_ATTR =  Longint;
const
  MONO_TYPE_ATTR_VISIBILITY_MASK = $00000007;
  MONO_TYPE_ATTR_NOT_PUBLIC = $00000000;
  MONO_TYPE_ATTR_PUBLIC = $00000001;
  MONO_TYPE_ATTR_NESTED_PUBLIC = $00000002;
  MONO_TYPE_ATTR_NESTED_PRIVATE = $00000003;
  MONO_TYPE_ATTR_NESTED_FAMILY = $00000004;
  MONO_TYPE_ATTR_NESTED_ASSEMBLY = $00000005;
  MONO_TYPE_ATTR_NESTED_FAM_AND_ASSEM = $00000006;
  MONO_TYPE_ATTR_NESTED_FAM_OR_ASSEM = $00000007;
  MONO_TYPE_ATTR_LAYOUT_MASK = $00000018;
  MONO_TYPE_ATTR_AUTO_LAYOUT = $00000000;
  MONO_TYPE_ATTR_SEQUENTIAL_LAYOUT = $00000008;
  MONO_TYPE_ATTR_EXPLICIT_LAYOUT = $00000010;
  MONO_TYPE_ATTR_CLASS_SEMANTIC_MASK = $00000020;
  MONO_TYPE_ATTR_CLASS = $00000000;
  MONO_TYPE_ATTR_INTERFACE = $00000020;
  MONO_TYPE_ATTR_ABSTRACT = $00000080;
  MONO_TYPE_ATTR_SEALED = $00000100;
  MONO_TYPE_ATTR_SPECIAL_NAME = $00000400;
  MONO_TYPE_ATTR_IMPORT = $00001000;
  MONO_TYPE_ATTR_SERIALIZABLE = $00002000;
  MONO_TYPE_ATTR_STRING_FORMAT_MASK = $00030000;
  MONO_TYPE_ATTR_ANSI_CLASS = $00000000;
  MONO_TYPE_ATTR_UNICODE_CLASS = $00010000;
  MONO_TYPE_ATTR_AUTO_CLASS = $00020000;
  MONO_TYPE_ATTR_CUSTOM_CLASS = $00030000;
  MONO_TYPE_ATTR_CUSTOM_MASK = $00c00000;
  MONO_TYPE_ATTR_BEFORE_FIELD_INIT = $00100000;
  MONO_TYPE_ATTR_FORWARDER = $00200000;
  MONO_TYPE_ATTR_RESERVED_MASK = $00040800;
  MONO_TYPE_ATTR_RT_SPECIAL_NAME = $00000800;
  MONO_TYPE_ATTR_HAS_SECURITY = $00040000;

implementation

end.
